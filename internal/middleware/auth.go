package middleware

import (
	"fmt"
	"net/http"
	"strings"

	"bookstore/pkg/config"
	"github.com/golang-jwt/jwt/v4"
)

func AuthMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ `JWT_SECRET`
		if config.JwtSecret == "" {
			fmt.Println("üö® JWT_SECRET is empty in authMiddleware! Check config.go")
			http.Error(w, "Internal server error", http.StatusInternalServerError)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
		authHeader := r.Header.Get("Authorization")
		if authHeader == "" {
			fmt.Println("üö® Missing Authorization header")
			http.Error(w, "Missing Authorization header", http.StatusUnauthorized)
			return
		}

		// –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É `Bearer <token>`
		parts := strings.Split(authHeader, " ")
		if len(parts) != 2 || parts[0] != "Bearer" {
			fmt.Println("üö® Invalid Authorization header format:", authHeader)
			http.Error(w, "Invalid Authorization header format", http.StatusUnauthorized)
			return
		}

		tokenString := parts[1]
		fmt.Println("‚úÖ Received Token:", tokenString)
		fmt.Println("‚úÖ JWT Secret in authMiddleware:", config.JwtSecret)

		// –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω
		token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
			if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
				return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
			}
			return []byte(config.JwtSecret), nil
		})

		if err != nil || !token.Valid {
			fmt.Println("üö® Token validation error:", err)
			http.Error(w, "Invalid token", http.StatusUnauthorized)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞
		claims, ok := token.Claims.(jwt.MapClaims)
		if !ok {
			fmt.Println("üö® Invalid token claims")
			http.Error(w, "Invalid token claims", http.StatusUnauthorized)
			return
		}

		userIDFloat, ok := claims["user_id"].(float64)
		if !ok {
			fmt.Println("üö® user_id not found in token claims")
			http.Error(w, "Invalid token payload", http.StatusUnauthorized)
			return
		}

		userID := int(userIDFloat)
		fmt.Println("‚úÖ Extracted user_id from token:", userID)

		// –ü–µ—Ä–µ–¥–∞—ë–º user_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö)
		r.Header.Set("X-User-ID", fmt.Sprintf("%d", userID))

		next.ServeHTTP(w, r)
	})
}
